import json
import logging
from datetime import datetime, timedelta

from aiohttp import ClientSession

from app.cache.redis_actions import check_redis_key
from config.logging import send_logging
from config.settings import BOT_TOKEN
from cronjobs.parse_stockrates import save_euro_rates, save_dollar_rates

logger = logging.getLogger(__name__)

base_url = "https://api.telegram.org/bot{}/".format(BOT_TOKEN)
send_message = "{}sendMessage".format(base_url)
headers = {'content-type': 'application/json'}


async def start(data, request):
	user_id = data["message"]["from"]["id"]
	username = data["message"]["from"]["username"]
	first_name = data["message"]["from"]["first_name"]

	try:
		last_name = data["message"]["from"]["last_name"]
	except KeyError:
		last_name = ""

	message = data["message"]["text"]
	now = datetime.now()
	keyboard = await main_keyboard()
	try:
		post_data = json.dumps({
			"chat_id": data["message"]["from"]["id"],
			"text": "{}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!\n\n"
			        "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã c–º–æ–∂–µ—à—å –±—ã—Å—Ç—Ä–æ —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä\n\n"
			        "- üá™üá∫EUR/üá∑üá∫RUB\n"
			        "- üá∫üá∏USD/üá∑üá∫RUB".format(data["message"]["from"]["first_name"]),
			"reply_markup": keyboard
		})
		async with ClientSession(headers=headers) as session:
			await session.post(url=send_message, data=post_data)

		db_conn = request.app["postgres"]
		async with db_conn.acquire() as con:
			async with con.transaction():
				user_exists = await con.fetchrow("SELECT id from users where user_id=$1", user_id)
				if not user_exists:
					await con.execute("INSERT INTO users (user_id, username, first_name, last_name, date)"
					                  "VALUES ($1, $2, $3, $4, $5)",
					                  user_id, username, first_name, last_name, now
					)
				await con.execute("INSERT INTO messages (date, message, from_user_id)"
				            "VALUES ($1, $2, $3)",
				            now, message, user_id
				)

	except Exception as exc:
		send_logging(exception=exc)


async def incorrect_request(data, request):
	user_id = data["message"]["from"]["id"]
	username = data["message"]["from"]["username"]
	first_name = data["message"]["from"]["first_name"]
	try:
		last_name = data["message"]["from"]["last_name"]
	except KeyError:
		last_name = ""
	try:
		message = data["message"]["text"]
	except KeyError:
		message = "not message"

	now = datetime.now()
	keyboard = await main_keyboard()
	try:
		post_data = json.dumps({
			"chat_id": data["message"]["from"]["id"],
			"text": "–í–∞—à –∑–∞–ø—Ä–æ—Å –º–Ω–µ –Ω–µ–ø–æ–Ω—è—Ç–µ–Ω üòî \n–ü–æ–∫–∞ —á—Ç–æ —è –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –ø–æ –∫–æ—Ç–∏—Ä–æ–≤–∫–∞–º –≤–∞–ª—é—Ç",
			"reply_markup": keyboard
		})
		async with ClientSession(headers=headers) as session:
			await session.post(url=send_message, data=post_data)

		db_conn = request.app["postgres"]
		async with db_conn.acquire() as con:
			async with con.transaction():
				user_exists = await con.fetchrow("SELECT id from users where user_id=$1", user_id)
				if not user_exists:
					await con.execute("INSERT INTO users (user_id, username, first_name, last_name, date)"
					                  "VALUES ($1, $2, $3, $4, $5)",
					                  user_id, username, first_name, last_name, now
					)
				await con.execute("INSERT INTO messages (date, message, from_user_id)"
				                  "VALUES ($1, $2, $3)",
				                  now, message, user_id
				                  )
	except Exception as exc:
		send_logging(exception=exc)


async def euro_rates(data, request):
	keyboard = await main_keyboard()
	text = await render_exchange_text()
	try:
		redis_data = await check_redis_key(redis_key="euro_rates", request=request)
		if redis_data:
			await send_redis_data(data=data, currency="–µ–≤—Ä–æ", text=text, keyboard=keyboard, redis_data=redis_data)
		else:
			wait_post_data = json.dumps({
				"chat_id": data["message"]["from"]["id"],
				"text": "<i>–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ. –û–∂–∏–¥–∞–π—Ç–µ...</i>",
				"parse_mode": "HTML",
				"disable_web_page_preview": True,
				"reply_markup": keyboard
			})
			async with ClientSession(headers=headers) as session:
				await session.post(url=send_message, data=wait_post_data)

			await save_euro_rates()

			redis_data = await check_redis_key(redis_key="euro_rates", request=request)
			if redis_data:
				await send_redis_data(data=data, currency="–µ–≤—Ä–æ", text=text, keyboard=keyboard, redis_data=redis_data)
			else:
				post_data = json.dumps({
					"chat_id": data["message"]["from"]["id"],
					"text": "–î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
					"parse_mode": "HTML",
					"disable_web_page_preview": True,
					"reply_markup": keyboard
				})
				async with ClientSession(headers=headers) as session:
					await session.post(url=send_message, data=post_data)
	except Exception as exc:
		send_logging(exception=exc)


async def dollar_rates(data, request):
	keyboard = await main_keyboard()
	text = await render_exchange_text()
	try:
		redis_data = await check_redis_key(redis_key="dollar_rates", request=request)
		if redis_data:
			await send_redis_data(data=data, currency="–¥–æ–ª–ª–∞—Ä–∞", text=text, keyboard=keyboard, redis_data=redis_data)
		else:
			wait_post_data = json.dumps({
				"chat_id": data["message"]["from"]["id"],
				"text": "<i>–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ. –û–∂–∏–¥–∞–π—Ç–µ...</i>",
				"parse_mode": "HTML",
				"disable_web_page_preview": True,
				"reply_markup": keyboard
			})
			async with ClientSession(headers=headers) as session:
				await session.post(url=send_message, data=wait_post_data)

			await save_dollar_rates()

			redis_data = await check_redis_key(redis_key="dollar_rates", request=request)
			if redis_data:
				await send_redis_data(data=data, currency="–¥–æ–ª–ª–∞—Ä–∞", text=text, keyboard=keyboard, redis_data=redis_data)
			else:
				post_data = json.dumps({
					"chat_id": data["message"]["from"]["id"],
					"text": "–î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
					"parse_mode": "HTML",
					"disable_web_page_preview": True,
					"reply_markup": keyboard
				})
				async with ClientSession(headers=headers) as session:
					await session.post(url=send_message, data=post_data)
	except Exception as exc:
		send_logging(exception=exc)


async def rates_analytics(data):
	keyboard = await keyboard_render(buttons_list=[["–ï–≤—Ä–æ"], ["–î–æ–ª–ª–∞—Ä"]])
	try:
		post_data = json.dumps({
			"chat_id": data["message"]["from"]["id"],
			"text": "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ —É –±–∞–Ω–∫–æ–≤",
			"parse_mode": "HTML",
			"reply_markup": keyboard
		})
		async with ClientSession(headers=headers) as session:
			await session.post(url=send_message, data=post_data)
	except Exception as exc:
		send_logging(exception=exc)


async def analytics_message(data):
	currency = data["message"]["text"].lower()
	if currency == "–µ–≤—Ä–æ":
		emoji = "üá™üá∫"
	elif currency == "–¥–æ–ª–ª–∞—Ä":
		emoji = "üá∫üá∏"
	else:
		raise NameError

	keyboard = await keyboard_render(buttons_list=[["–î–µ–Ω—å {}".format(emoji)],
	                                               ["–ù–µ–¥–µ–ª—è {}".format(emoji)],
	                                               ["–ú–µ—Å—è—Ü {}".format(emoji)],
	                                               ["–ì–æ–¥ {}".format(emoji)],
	                                               ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]])
	try:
		post_data = json.dumps({
			"chat_id": data["message"]["from"]["id"],
			"text": "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥",
			"parse_mode": "HTML",
			"disable_web_page_preview": True,
			"reply_markup": keyboard
		})
		async with ClientSession(headers=headers) as session:
			await session.post(url=send_message, data=post_data)
	except Exception as e:
		send_logging(exception=e)


async def analytics_for_period(data, request):
	now = datetime.now().date()
	tomorrow = now + timedelta(days=1)
	user_request = data["message"]["text"]
	emoji = user_request.split()[-1]

	if emoji == "üá™üá∫":
		currency = "euro"
	elif emoji == "üá∫üá∏":
		currency = "dollar"
	else:
		raise NameError

	if "–î–µ–Ω—å" in user_request:
		date1 = now
		date2 = tomorrow
	elif "–ù–µ–¥–µ–ª—è" in user_request:
		date1 = now - timedelta(weeks=1)
		date2 = tomorrow
	elif "–ú–µ—Å—è—Ü" in user_request:
		date1 = now - timedelta(weeks=4)
		date2 = tomorrow
	elif "–ì–æ–¥" in user_request:
		date1 = now - timedelta(days=365)
		date2 = tomorrow
	else:
		raise NameError

	try:
		db_conn = request.app["postgres"]
		async with db_conn.acquire() as con:
			async with con.transaction():
				_period = await con.fetchrow("SELECT json_agg(json_build_object('cbr', rates.cbr, 'tinkoff', rates.tinkoff, 'sberbank', rates.sberbank, 'vtb', rates.vtb, 'spbbank', rates.spbbank)) as values_list from rates where rate='{}' and date between '{}' and '{}'".format(currency, date1, date2))

		period = json.loads(_period["values_list"])
		first_rate = period[0]
		last_rate = period[-1]

		cbr_delta = last_rate["cbr"] - first_rate["cbr"]
		tinkoff_delta = last_rate["tinkoff"] - first_rate["tinkoff"]
		sberbank_delta = last_rate["sberbank"] - first_rate["sberbank"]
		vtb_delta = last_rate["vtb"] - first_rate["vtb"]
		spbbank_delta = last_rate["spbbank"] - first_rate["spbbank"]

		keyboard = await keyboard_render(buttons_list=[["–î–µ–Ω—å {}".format(emoji)],
		                                               ["–ù–µ–¥–µ–ª—è {}".format(emoji)],
		                                               ["–ú–µ—Å—è—Ü {}".format(emoji)],
		                                               ["–ì–æ–¥ {}".format(emoji)],
		                                               ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]])
		text = await render_analytics_text()
		post_data = json.dumps({
			"chat_id": data["message"]["from"]["id"],
			"text": text.format(
				currency="–µ–≤—Ä–æ" if currency == "euro" else "–¥–æ–ª–ª–∞—Ä—É",
				date=now.strftime("%d.%m.%Y"),
				cbr=await render_delta(_delta=cbr_delta),
				tinkoff=await render_delta(_delta=tinkoff_delta),
				sberbank=await render_delta(_delta=sberbank_delta),
				vtb=await render_delta(_delta=vtb_delta),
				spbbank=await render_delta(_delta=spbbank_delta)
			),
			"parse_mode": "HTML",
			"disable_web_page_preview": True,
			"reply_markup": keyboard
		})
		async with ClientSession(headers=headers) as session:
			await session.post(url=send_message, data=post_data)
	except Exception as e:
		send_logging(exception=e)


async def render_delta(_delta):
	if _delta < 0:
		delta = "üìâ {:.2f}".format(_delta)
	elif _delta > 0:
		delta = "üìà +{:.2f}".format(_delta)
	else:
		delta = 0
	return delta


async def main_keyboard():
	return json.dumps({
		"resize_keyboard": True,
		"keyboard": [["–ö—É—Ä—Å –µ–≤—Ä–æ üí∂"],
		             ["–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ üíµ"],
		             ["–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ üìä"]]
	})


async def keyboard_render(buttons_list: list):
	return json.dumps({
		"resize_keyboard": True,
		"keyboard": buttons_list
	})


async def render_analytics_text():
	return "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ {currency} –∑–∞ {date}\n\n" \
		   "–¶–ë: <b>{cbr} ‚ÇΩ</b>\n" \
	       "–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ë–∞–Ω–∫: <b>{tinkoff} ‚ÇΩ</b>\n" \
	       "–°–±–µ—Ä–±–∞–Ω–∫: <b>{sberbank} ‚ÇΩ</b>\n" \
	       "–ë–∞–Ω–∫ –í–¢–ë: <b>{vtb} ‚ÇΩ</b>\n" \
	       "–ë–∞–Ω–∫ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥: <b>{spbbank} ‚ÇΩ</b>\n\n"


async def render_exchange_text():
	return "–ö—É—Ä—Å {currency} –Ω–∞ {date}\n" \
	       "–¶–ë: <b>{cbr} ‚ÇΩ</b>\n\n" \
	       "‚ÇΩ ‚Üí ‚Ç¨ | ‚Ç¨ ‚Üí ‚ÇΩ\n" \
	       "–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ë–∞–Ω–∫: <b>{tinkoff} ‚ÇΩ</b> | <b>{tinkoff_to_rub} ‚ÇΩ</b>\n" \
	       "–°–±–µ—Ä–±–∞–Ω–∫: <b>{sberbank} ‚ÇΩ</b> | <b>{sberbank_to_rub} ‚ÇΩ</b>\n" \
	       "–ë–∞–Ω–∫ –í–¢–ë: <b>{vtb} ‚ÇΩ</b> | <b>{vtb_to_rub} ‚ÇΩ</b>\n" \
	       "–ë–∞–Ω–∫ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥: <b>{spbbank} ‚ÇΩ</b> | <b>{spbbank_to_rub} ‚ÇΩ</b>\n\n"
	       # "–í—Å–µ –±–∞–Ω–∫–∏: {all_banks}"


async def send_redis_data(data, currency, text, keyboard, redis_data):
	if currency == "dollar":
		_c = "usd"
	else:
		_c = "euro"
	try:
		post_data = json.dumps({
			"chat_id": data["message"]["from"]["id"],
			"text": text.format(
				currency=currency,
				date=redis_data["date"],
				cbr=redis_data["cbr"],
				tinkoff=redis_data["rub_to_{}".format(_c)]["tinkoff"],
				tinkoff_to_rub=redis_data["{}_to_rub".format(_c)]["tinkoff"],
				sberbank=redis_data["rub_to_{}".format(_c)]["sberbank"],
				sberbank_to_rub=redis_data["{}_to_rub".format(_c)]["sberbank"],
				vtb=redis_data["rub_to_{}".format(_c)]["vtb"],
				vtb_to_rub=redis_data["{}_to_rub".format(_c)]["vtb"],
				spbbank=redis_data["rub_to_{}".format(_c)]["spbbank"],
				spbbank_to_rub=redis_data["{}_to_rub".format(_c)]["spbbank"]),
				# all_banks="https://www.banki.ru/products/currency/cash/{}/sankt-peterburg/#sort=sale&order=asc".format(_c)),
			"parse_mode": "HTML",
			"disable_web_page_preview": True,
			"reply_markup": keyboard
		})
		async with ClientSession(headers=headers) as session:
			await session.post(url=send_message, data=post_data)
	except Exception as exc:
		send_logging(exception=exc)
